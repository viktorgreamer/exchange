<?php

namespace common\models;

use common\models\services\GoogleGeolocation;
use lhs\Yii2SaveRelationsBehavior\SaveRelationsBehavior;
use Yii;
use yii\helpers\Html;

/**
 * This is the model class for table "exchange_points".
 *
 * @property int $id id
 * @property string $address Адрес
 * @property double $latitude Широта
 * @property double $longitude Долгота
 * @property int $entity_id Юрлицо
 * @property int $city_id Город
 * @property int $region_id Район
 * @property string $time_start Начало работы
 * @property string $time_end Конец работы
 * @property string $phone1 Телефон1
 * @property string $phone2 Телефон2
 * @property string $name Наименование
 * @property string $link Ссылка на сайт
 * @property int $status Статус
 * @property boolean $main Главная точка
 * @property double $rating Рейтинг
 * @property double $rating_geo Рейтинг расположения
 * @property double $rating_actuality Рейтинг актуальности курса
 * @property double $rating_service Рейтинг обслуживания
 * @property Cities $city
 * @property Entities $entity
 * @property Regions $city0
 * @property OpeningHours[] $openingHours
 * @property OpeningHours[] schedule
 * @property ExchangeRates exchangeRate
 * @property ExchangeRates[] exchangeRates
 */
class ExchangePoints extends \yii\db\ActiveRecord
{

    public function behaviors()
    {
        return [
            'saveRelations' => [
                'class' => SaveRelationsBehavior::className(),
                'relations' => [
                    //  'schedule',
                ],
            ],
        ];
    }

    public function transactions()
    {
        return [
            self::SCENARIO_DEFAULT => self::OP_ALL,
        ];
    }

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'exchange_points';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['latitude', 'longitude', 'rating', 'rating_geo', 'rating_actuality', 'rating_service'], 'number'],
            [['entity_id', 'city_id', 'region_id'], 'required'],
            [['entity_id', 'city_id', 'region_id', 'status'], 'integer'],
            [['address', 'name', 'link'], 'string', 'max' => 256],
            [['phone1', 'phone2'], 'string', 'max' => 20],
            [['schedule'], 'safe'],
            [['main'], 'boolean'],
            [['city_id'], 'exist', 'skipOnError' => true, 'targetClass' => Cities::className(), 'targetAttribute' => ['city_id' => 'id']],
            [['entity_id'], 'exist', 'skipOnError' => true, 'targetClass' => Entities::className(), 'targetAttribute' => ['entity_id' => 'id']],
            [['region_id'], 'exist', 'skipOnError' => true, 'targetClass' => Regions::className(), 'targetAttribute' => ['city_id' => 'id']],
        ];
    }

    public function beforeValidate()
    {

        if (!$this->entity_id) {
            if ($entity = Entities::findOne(['user_id' => Yii::$app->user->id])) {
                $this->entity_id = $entity->id;
            }
        }

        if ((!$this->latitude || !$this->longitude) && ($this->city)) {
            $google = new GoogleGeolocation($this->city->name . ", " . $this->address);
            $google->handle();

            if ($google->status) {
                $response = $google->getResponses()[0];
                $this->latitude = $response->lat;
                $this->longitude = $response->lng;
            }

        }



        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'id'),
            'address' => Yii::t('app', 'Адрес'),
            'main' => Yii::t('app', 'Главная точка'),
            'latitude' => Yii::t('app', 'Широта'),
            'longitude' => Yii::t('app', 'Долгота'),
            'entity_id' => Yii::t('app', 'Юрлицо'),
            'city_id' => Yii::t('app', 'Город'),
            'region_id' => Yii::t('app', 'Район'),
            'entity.name' => Yii::t('app', 'Юрлицо'),
            'city.name' => Yii::t('app', 'Город'),
            'region.name' => Yii::t('app', 'Район'),
            'phone1' => Yii::t('app', 'Телефон1'),
            'phone2' => Yii::t('app', 'Телефон2'),
            'name' => Yii::t('app', 'Наименование'),
            'link' => Yii::t('app', 'Ссылка на сайт'),
            'status' => Yii::t('app', 'Статус'),
            'rating' => Yii::t('app', 'Рейтинг'),
            'rating_geo' => Yii::t('app', 'Рейтинг расположения'),
            'rating_actuality' => Yii::t('app', 'Рейтинг актуальности курса'),
            'rating_service' => Yii::t('app', 'Рейтинг обслуживания'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCity()
    {
        return $this->hasOne(Cities::className(), ['id' => 'city_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEntity()
    {
        return $this->hasOne(Entities::className(), ['id' => 'entity_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRegion()
    {
        return $this->hasOne(Regions::className(), ['id' => 'region_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOpeningHours()
    {
        return $this->hasMany(OpeningHours::className(), ['exchange_point_id' => 'id']);
    }

    public function getExchangeRates()
    {
        return $this->hasMany(ExchangeRates::className(), ['point_id' => 'id']);
    }

    /**
     * @param int $point_id
     */
    public function afterSetCurrencies($point_id)
    {
        if ($this->entity->has_one_currency) {
            $entityPointsId = $this->entity->getExchangePoints()->select('id')->column();
            if ($rates = ExchangeRates::find()->where(['point_id' => $point_id])->all()) {
                /** @var ExchangeRates[] $rates */
                foreach ($rates as $rate) {
                    ExchangeRates::updateAll(['buy' => $rate->buy, 'sell' => $rate->sell],
                        [
                            'AND',
                            ['pair_id' => $rate->pair_id],
                            ['point_id' => $entityPointsId]
                        ]);
                }
            }
        }
    }

    /**
     * @param int $point_id
     */
    public function afterSetSchedule($point_id)
    {
        if ($this->entity->has_one_opening_hours and $this->main) {
            $entityPointsId = $this->entity->getExchangePoints()->select('id')->column();
            if ($openingHours = OpeningHours::find()->where(['exchange_point_id' => $point_id])->all()) {
                /** @var OpeningHours[] $openingHours */
                foreach ($openingHours as $openingHour) {
                    OpeningHours::updateAll(['time_start' => $openingHour->time_start, 'time_end' => $openingHour->time_end],
                        [
                            'AND',
                            ['day' => $openingHour->day],
                            ['exchange_point_id' => $entityPointsId]
                        ]);
                }
            }
        }
    }

    public function setCurrencies($rates)
    {
        $allValidated = false;
        if ($rates) {
            $allValidated = true;
            foreach ($rates as $rate) {
                if ($exchangeRate = ExchangeRates::findOne(['point_id' => $this->id, 'pair_id' => $rate['pair_id']])) {
                    $exchangeRate->buy = $rate['buy'];
                    $exchangeRate->sell = $rate['sell'];
                } else {
                    $exchangeRate = new ExchangeRates(
                        [
                            'point_id' => $this->id,
                            'pair_id' => $rate['pair_id'],
                            'buy' => $rate['buy'],
                            'sell' => $rate['sell'],
                        ]);

                }
                $allValidated = $exchangeRate->save() && $allValidated;
                if (!$allValidated) $this->addError('currencies', json_encode($exchangeRate->errors));
            }
            if ($allValidated) $this->afterSetCurrencies($this->id);
        }

        return $allValidated;
    }

    public
    function getCurrencies()
    {
        return $this->getExchangeRates()->asArray()->all();
    }

    public
    function getSchedule()
    {
        $schedule = [];
        if (!$this->openingHours) {
            foreach (range(1, 7) as $day) {
                $schedule[] = new OpeningHours(['day' => $day, 'time_start' => 60 * 8, 'time_end' => 60 * 18]);
            }
        } else {
            /* if ($this->entity->has_one_opening_hours and !$this->main) {
                 $schedule = OpeningHours::find()->where(['exchange_point_id' => ExchangePoints::findOne(['entity_id' => $this->entity->id,'main' => true])])->asArray()->all();
             }
             else */

            $schedule = $this->getOpeningHours()->asArray()->all();
        }

        return $schedule;
    }

    public function setSchedule($openingHours)
    {
        $allValidated = false;
        if ($openingHours) {
            $allValidated = true;
            foreach ($openingHours as $openingHour) {
                if ($openingHoursDay = OpeningHours::findOne(['exchange_point_id' => $this->id, 'day' => $openingHour['day']])) {
                    $openingHoursDay->time_start = $openingHour['time_start'];
                    $openingHoursDay->time_end = $openingHour['time_end'];
                } else {
                    $openingHoursDay = new OpeningHours(
                        [
                            'exchange_point_id' => $this->id,
                            'day' => $openingHour['day'],
                            'time_start' => $openingHour['time_start'],
                            'time_end' => $openingHour['time_end'],
                        ]);

                }
                $allValidated = $openingHoursDay->save() && $allValidated;
            }

            if ($allValidated) $this->afterSetSchedule($this->id);

        }
    }

    public function getRates()
    {
        if ($this->exchangeRates) {
            $trs = [];
            foreach ($this->exchangeRates as $exchangeRate) {
                $trs[] = Html::tag('tr', Html::tag('td', $exchangeRate->pair->render . Html::tag('td', $exchangeRate->buy) . Html::tag('td', $exchangeRate->sell)));
            }

            return Html::tag('table', implode("", $trs), ['class' => 'table table-stripped']);
        }
    }


}
